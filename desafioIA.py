# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w4nf_XN4f2EXkvymnd-XxugFShAxco_N
"""

!pip install requests pillow

import requests

# URL da página com a imagem
url_pagina = "https://intern.aiaxuropenings.com/scrape/4c3b5935-730a-4cc6-b06b-95f3010ef594"

# Fazer requisição para a página
response = requests.get(url_pagina)

# Verificar se deu certo
if response.status_code == 200:
    # Supondo que a imagem está em uma tag <img> com src direto
    # (pode precisar ajustar dependendo da estrutura da página)
    from bs4 import BeautifulSoup
    soup = BeautifulSoup(response.text, 'html.parser')
    img_tag = soup.find('img')

    if img_tag:
        img_url = img_tag['src']
        # Se a URL for relativa, precisamos completar
        if not img_url.startswith('http'):
            img_url = url_pagina + img_url if img_url.startswith('/') else url_pagina + '/' + img_url

        # Baixar a imagem
        img_response = requests.get(img_url)
        with open('imagem_baixada.jpg', 'wb') as f:
            f.write(img_response.content)
        print("Imagem baixada com sucesso!")
    else:
        print("Não encontrei a tag de imagem na página")
else:
    print(f"Erro ao acessar a página: {response.status_code}")

from IPython.display import Image, display

try:
    display(Image(filename='imagem_baixada.jpg'))
    print("Imagem carregada com sucesso!")
except:
    print("Erro ao carregar a imagem - verifique o download")

# desafio_aiax.py
import os
import requests
from bs4 import BeautifulSoup
from PIL import Image
import base64

# Configurações (token via variável de ambiente)
API_TOKEN = os.getenv("API_TOKEN")
BASE_URL = "https://intern.aiaxuropenings.com"

def download_image():
    """Baixa a imagem do desafio."""
    response = requests.get(f"{BASE_URL}/scrape/4c3b5935-730a-4cc6-b06b-95f3010ef594")
    soup = BeautifulSoup(response.text, 'html.parser')
    img_url = soup.find('img')['src']
    # ... (restante do código de download)

def analyze_image(image_path: str):
    """Processa e envia a imagem para análise."""
    # ... (código de redimensionamento e base64)

    payload = {
        "model": "microsoft-florence-2-large",
        "messages": [{
            "role": "user",
            "content": "<DETAILED_CAPTION>",
            "images": [f"data:image/jpeg;base64,{img_base64}"]
        }]
    }
    # ... (restante do envio)

if __name__ == "__main__":
    download_image()
    analyze_image("imagem_processada.jpg")

from IPython.display import Image
Image(filename="imagem_processada.jpg")

import requests

url = "https://intern.aiaxuropenings.com/v1/chat/completions"
token = "ojCfA3F677xnoO1dFhOVmTreuIJBC711"  # ← Use seu token real aqui

response = requests.post(
    url,
    headers={
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    },
    json={
        "model": "microsoft-florence-2-large",
        "messages": [{"role": "user", "content": "Teste de conexão"}]
    }
)

print(f"Status Code: {response.status_code}")
print(f"Resposta: {response.text}")